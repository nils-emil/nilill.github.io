{"version":3,"file":"static/js/content.4b2d8c6a.chunk.js","mappings":"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","sources":["app/pages/account/settings/account-edit-form.tsx","app/pages/account/settings/settings.tsx","app/shared/components/login/logout.tsx","app/pages/account/activate/activate.tsx","app/pages/account/password/password.tsx","app/pages/account/password-reset/init/password-reset-init.tsx","app/routes/content.tsx","app/shared/error/error-boundary-routes.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {Avatar, Box, Button, Modal, Popover, TextField} from \"@mui/material\";\nimport {style} from \"app/shared/util/modal-style\";\nimport {useAppDispatch, useAppSelector} from \"app/config/store\";\nimport {When} from \"react-if\";\nimport {toast} from \"react-toastify\";\nimport * as Yup from \"yup\";\nimport {yupResolver} from \"@hookform/resolvers/yup/dist/yup\";\nimport {hasAnyAuthority} from \"app/shared/auth/private-route\";\nimport {AUTHORITIES} from \"app/config/constants\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select from \"@mui/material/Select\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport {getRoles, getUser, updateUser} from \"app/pages/administration/user-management/user-management.reducer\";\nimport {resetUpdateResult, saveAccountSettings} from \"app/pages/account/settings/settings.reducer\";\n\nconst AccountEditForm = ({onUpdate, login}: { onUpdate: () => void, login: string }) => {\n\n  const dispatch = useAppDispatch();\n  const isAuthenticated = useAppSelector(state => state.authentication.isAuthenticated);\n  const isAdmin = useAppSelector(state => hasAnyAuthority(state.authentication.account.authorities, [AUTHORITIES.ADMIN]));\n  const [modalOpen, setModalOpen] = useState(false);\n  const [imageUrl, setImageUrl] = useState('');\n  const successMessage = useAppSelector(state => state.settings.successMessage);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const authorities = useAppSelector(state => state.userManagement.authorities);\n  const account = useAppSelector(state => state.userManagement.userExtended);\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .required('Email is required')\n      .email()\n      .min(5, 'Your email is required to be at least 5 characters.')\n      .max(50, 'Your email cannot be longer than 50 characters.'),\n  });\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    if (modalOpen) {\n      dispatch(getUser(login));\n    }\n\n  }, [login, modalOpen]);\n\n  useEffect(() => {\n    if (isAdmin && modalOpen) {\n      dispatch(getRoles());\n    }\n  }, [isAuthenticated, isAdmin, modalOpen]);\n\n  const {\n    register,\n    getValues,\n    reset,\n    formState: {errors}\n  } = useForm({\n    mode: 'all',\n    resolver: yupResolver(validationSchema)\n  });\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(successMessage);\n      setModalOpen(false)\n      dispatch(resetUpdateResult())\n      if (onUpdate) {\n        onUpdate()\n      }\n    }\n  }, [successMessage]);\n\n  useEffect(() => {\n    if (account) {\n      setImageUrl(account.imageUrl)\n      reset(account)\n    }\n  }, [account]);\n\n  const handleAvatarChange = (avatar) => {\n    setImageUrl(avatar)\n    setAnchorEl(null)\n  }\n\n  const avatars = [\n    \"/static/images/avatars/img.webp\",\n    \"/static/images/avatars/img_1.webp\",\n    \"/static/images/avatars/img_2.webp\",\n    \"/static/images/avatars/img_3.webp\",\n    \"/static/images/avatars/img_4.webp\",\n    \"/static/images/avatars/img_5.webp\",\n    \"/static/images/avatars/img_6.webp\",\n    \"/static/images/avatars/img_7.webp\",\n    \"/static/images/avatars/img_8.webp\",\n    \"/static/images/avatars/img_9.webp\"\n  ]\n\n  const open = Boolean(anchorEl);\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    const payload = {\n      ...getValues(),\n      imageUrl\n    };\n    if (isAdmin) {\n      dispatch(updateUser(payload));\n    } else {\n      dispatch(saveAccountSettings(payload));\n    }\n  };\n\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <>\n      <When condition={isAuthenticated}>\n        <Button onClick={() => setModalOpen(true)}>...</Button>\n      </When>\n      <Modal\n        disableEnforceFocus\n        open={modalOpen}\n        onClose={() => setModalOpen(false)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\">\n        <Box sx={style}>\n          <form onSubmit={onSubmit} className=\"space-y-2\">\n            <Avatar sx={{width: 90, height: 90}}\n                    className=\"cursor-pointer mb-3\"\n                    onClick={handleClick}\n                    alt={account.login}\n                    src={imageUrl}></Avatar>\n\n            <TextField\n              required\n              id=\"email\"\n              key={`email${account?.email}`}\n              name=\"email\"\n              type=\"email\"\n              label=\"Email\"\n              fullWidth\n              {...register('email')}\n              error={!!errors.email}\n            />\n            <TextField\n              id=\"website\"\n              name=\"website\"\n              type=\"text\"\n              key={`website${account?.id}`}\n              label=\"Website URL\"\n              fullWidth\n              {...register('website')}\n              error={!!errors.website}\n            />\n            <TextField\n              id=\"name\"\n              name=\"name\"\n              key={`name${account?.id}`}\n              type=\"text\"\n              label=\"Name\"\n              fullWidth\n              {...register('name')}\n              error={!!errors.name}\n            />\n            <p>\n              {errors.email?.message}\n            </p>\n            <Popover\n              id={id}\n              open={open}\n              anchorEl={anchorEl}\n              onClose={handleClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n            >\n              <div className=\"grid grid-cols-3 p-2\">\n                {avatars.map(e => {\n                  return <Avatar key={e} sx={{width: 90, height: 90}} className=\"cursor-pointer m-2\"\n                                 onClick={() => handleAvatarChange(e)} alt={e} src={e}></Avatar>\n                })}\n              </div>\n            </Popover>\n            <TextField {...register('description')}\n                       placeholder=\"Account description\"\n                       minRows={3}\n                       multiline\n                       className=\"w-full p-3 border-2\t\"/>\n            <When condition={isAdmin}>\n              <FormControl sx={{width: \"100%\"}}>\n                <InputLabel id=\"demo-multiple-checkbox-label\">Authorities</InputLabel>\n                <Select\n                  key={`authorities${account?.id}`}\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  multiple\n                  {...register('authorities')}\n                  defaultValue={account?.authorities || []}\n                  input={<OutlinedInput label=\"Authorities\"/>}>\n                  {authorities.map((name) => (\n                    <MenuItem key={name} value={name}>\n                      <ListItemText primary={name}/>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </When>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              className=\"w-full\"\n              type=\"submit\">\n              Save\n            </Button>\n          </form>\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport default AccountEditForm;\n","import React, {useEffect} from 'react';\nimport {useAppDispatch, useAppSelector} from 'app/config/store';\nimport {getSession} from 'app/shared/reducers/authentication';\nimport {reset} from './settings.reducer';\nimport {useParams} from \"react-router-dom\";\nimport {When} from \"react-if\";\nimport \"./settings.scss\"\nimport AccountEditForm from './account-edit-form';\nimport {getPublicProfile} from \"app/pages/administration/user-management/user-management.reducer\";\n\nexport const SettingsPage = () => {\n  const {login} = useParams<'login'>();\n  const dispatch = useAppDispatch();\n  const isAuthenticated = useAppSelector(state => state.authentication.isAuthenticated);\n\n  useEffect(() => {\n    dispatch(getSession());\n    dispatch(getPublicProfile(login));\n    return () => {\n      dispatch(reset());\n    };\n  }, [login]);\n\n  return (\n    <div className=\"content\">\n      <When condition={isAuthenticated}>\n        {() => <AccountEditForm onUpdate={() => {\n          dispatch(getSession());\n          dispatch(getPublicProfile(login));\n        }} login={login}\n        />}\n      </When>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import React, {useEffect} from 'react';\n\nimport {useAppDispatch, useAppSelector} from 'app/config/store';\nimport {logout} from 'app/shared/reducers/authentication';\nimport { useNavigate} from \"react-router-dom\";\nimport {toast} from \"react-toastify\";\n\nexport const Logout = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const isAuthenticated = useAppSelector(state => state.authentication.isAuthenticated);\n\n  useEffect(() => {\n    dispatch(logout());\n  }, [])\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast.success(\"Logged out\")\n      navigate(\"/\")\n    }\n  }, [isAuthenticated])\n\n  return (\n    <div className=\"p-5\">\n      <h4>Logged out successfully!</h4>\n    </div>\n  );\n};\n\nexport default Logout;\n","import React, {useEffect} from 'react';\nimport {useNavigate, useSearchParams} from 'react-router-dom';\n\nimport {useAppDispatch, useAppSelector} from 'app/config/store';\nimport {activateAction, reset} from './activate.reducer';\nimport {Button} from \"@mui/material\";\nimport {When} from \"react-if\";\nimport {openLoginModal, openRegisterModal} from \"app/shared/components/login/login-modal.reducer\";\n\nexport const ActivatePage = () => {\n  const dispatch = useAppDispatch();\n\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const key = searchParams.get('key');\n\n    dispatch(activateAction(key));\n    return () => {\n      dispatch(reset());\n    };\n  }, []);\n\n  const {activationSuccess, activationFailure} = useAppSelector(state => state.activate);\n\n  return (\n    <div className=\"content flex justify-center items-center\">\n      <div className=\"justify-content-center \">\n        <div>\n          <When condition={activationSuccess}>\n            <div color=\"danger\" className=\"flex flex-col items-center gap-3 justify-center\">\n              <div className=\"font-medium text-3xl\">\n                Your user account has been activated.\n              </div>\n              <Button variant=\"contained\" onClick={() => {\n                navigate('/')\n                dispatch(openLoginModal())\n              }}>\n                Sign in\n              </Button>\n            </div>\n          </When>\n          <When condition={activationFailure}>\n            <div color=\"danger\" className=\"flex flex-col items-center gap-3 justify-center\">\n              <div className=\"font-medium text-3xl\">\n                Your user could not be activated.\n              </div>\n              <p className=\"block\">Please use the registration form to sign up.</p>\n              <div>\n                <Button variant=\"contained\" onClick={() => {\n                  navigate('/')\n                  dispatch(openRegisterModal())\n                }}>\n                  Sign up\n                </Button>\n              </div>\n            </div>\n          </When>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ActivatePage;\n","import React, {useEffect} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport * as Yup from 'yup';\nimport {Button, TextField} from \"@mui/material\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport {useAppDispatch, useAppSelector} from \"app/config/store\";\nimport {toast} from \"react-toastify\";\nimport {savePassword} from \"app/pages/account/password/password.reducer\";\n\nexport const PasswordPage = () => {\n\n  const dispatch = useAppDispatch();\n  const validationSchema = Yup.object().shape({\n    currentPassword: Yup.string().required('Current password is required'),\n    newPassword: Yup.string()\n      .required('New password is required')\n      .min(4, 'New password is required to be at least 4 characters.')\n      .max(50, 'Your password cannot be longer than 50 characters.'),\n    newPasswordConfirmation: Yup.string()\n      .required('Password confirmation is required')\n      .oneOf([Yup.ref('newPassword'), null], 'Confirmation must match new password')\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors}\n  } = useForm({\n    mode: 'all',\n    resolver: yupResolver(validationSchema)\n  });\n\n  const successMessage = useAppSelector(state => state.password.successMessage);\n  const errorMessage = useAppSelector(state => state.password.errorMessage);\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(successMessage);\n    } else if (errorMessage) {\n      toast.error(errorMessage);\n    }\n    reset();\n  }, [successMessage, errorMessage]);\n\n  const handleValidSubmit = ({currentPassword, newPassword}) => {\n    dispatch(savePassword({currentPassword, newPassword}));\n  };\n\n  return (\n    <div className=\"content\">\n      <form onSubmit={handleSubmit(handleValidSubmit, () => {\n      })} className=\"space-y-2\">\n        <h4 className=\"font-semibold text-2xl\">\n          Change password\n        </h4>\n        <TextField\n          required\n          id=\"currentPassword\"\n          color=\"secondary\"\n          name=\"currentPassword\"\n          type=\"password\"\n          label=\"Current password\"\n          fullWidth\n          {...register('currentPassword')}\n          error={!!errors.currentPassword}\n        />\n        <p>\n          {errors.currentPassword?.message}\n        </p>\n        <TextField\n          required\n          id=\"newPassword\"\n          name=\"newPassword\"\n          label=\"New password\"\n          color=\"secondary\"\n          type=\"password\"\n          fullWidth\n          {...register('newPassword')}\n          error={!!errors.newPassword}\n        />\n        <p>\n          {errors.newPassword?.message}\n        </p>\n        <TextField\n          required\n          id=\"newPasswordConfirmation\"\n          name=\"newPasswordConfirmation\"\n          label=\"New password confirmation\"\n          color=\"secondary\"\n          type=\"password\"\n          fullWidth\n          {...register('newPasswordConfirmation')}\n          error={!!errors.newPasswordConfirmation}\n        />\n        <div>\n          {errors.newPasswordConfirmation?.message}\n        </div>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          className=\"w-full\"\n          type=\"submit\">\n          Change password\n        </Button>\n      </form>\n    </div>\n  )\n};\n\nexport default PasswordPage;\n","import React, {useEffect} from 'react';\nimport {toast} from 'react-toastify';\n\nimport {handlePasswordResetInit, reset} from '../password-reset.reducer';\nimport {useAppDispatch, useAppSelector} from 'app/config/store';\n\nexport const PasswordResetInit = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(\n    () => () => {\n      dispatch(reset());\n    },\n    []\n  );\n\n  const successMessage = useAppSelector(state => state.passwordReset.successMessage);\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(successMessage);\n    }\n  }, [successMessage]);\n\n  return (\n    <>\n      Not implemented\n    </>\n  );\n};\n\nexport default PasswordResetInit;\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport ErrorBoundaryRoutes from 'app/shared/error/error-boundary-routes';\nimport Settings from 'app/pages/account/settings/settings';\nimport Logout from 'app/shared/components/login/logout';\nimport Activate from 'app/pages/account/activate/activate';\nimport Password from 'app/pages/account/password/password';\nimport PasswordResetInit from 'app/pages/account/password-reset/init/password-reset-init';\nimport PageNotFoundRedirect from 'app/shared/util/page-not-found-redirect';\n\nconst ContentRoutes = () => {\n  return (\n    <ErrorBoundaryRoutes>\n      <Route path=\"account/:login\" element={<Settings/>}/>\n      <Route path=\"logout\" element={<Logout/>}/>\n      <Route path=\"activate\" element={<Activate/>}/>\n      <Route path=\"account/change/password\" element={<Password/>}/>\n      <Route path=\"account/reset/request\" element={<PasswordResetInit/>}/>\n      <Route path=\"*\" element={<PageNotFoundRedirect/>}/>\n    </ErrorBoundaryRoutes>\n  );\n};\n\nexport default ContentRoutes;\n","import React from 'react';\nimport {Outlet, Route, Routes, RoutesProps} from 'react-router-dom';\n\nconst ErrorBoundaryRoutes = ({ children }: RoutesProps) => {\n  return (\n    <Routes>\n      <Route\n        element={\n          <Outlet />}\n      >\n        {children}\n      </Route>\n    </Routes>\n  );\n};\n\nexport default ErrorBoundaryRoutes;\n"],"names":["_ref","_errors$email","onUpdate","login","dispatch","useAppDispatch","isAuthenticated","useAppSelector","state","authentication","isAdmin","hasAnyAuthority","account","authorities","AUTHORITIES","_useState","useState","_useState2","_slicedToArray","modalOpen","setModalOpen","_useState3","_useState4","imageUrl","setImageUrl","successMessage","settings","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","userManagement","userExtended","validationSchema","Yup","shape","email","required","min","max","useEffect","getUser","getRoles","_useForm","useForm","mode","resolver","yupResolver","register","getValues","reset","errors","formState","toast","resetUpdateResult","open","Boolean","id","undefined","_jsxs","_Fragment","children","_jsx","When","condition","Button","onClick","Modal","disableEnforceFocus","onClose","Box","sx","style","onSubmit","event","preventDefault","payload","_objectSpread","updateUser","saveAccountSettings","className","Avatar","width","height","currentTarget","alt","src","TextField","name","type","label","fullWidth","error","concat","website","message","Popover","anchorOrigin","vertical","horizontal","map","e","placeholder","minRows","multiline","FormControl","InputLabel","Select","labelId","multiple","defaultValue","input","OutlinedInput","MenuItem","value","ListItemText","primary","variant","color","useParams","getSession","getPublicProfile","AccountEditForm","navigate","useNavigate","logout","_useSearchParams","useSearchParams","searchParams","key","get","activateAction","_useAppSelector","activate","activationSuccess","activationFailure","openLoginModal","openRegisterModal","_errors$currentPasswo","_errors$newPassword","_errors$newPasswordCo","currentPassword","newPassword","newPasswordConfirmation","oneOf","handleSubmit","password","errorMessage","savePassword","passwordReset","ErrorBoundaryRoutes","Route","path","element","Settings","Logout","Activate","Password","PasswordResetInit","PageNotFoundRedirect","Routes","Outlet"],"sourceRoot":""}